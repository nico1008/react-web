{"version":3,"file":"static/js/262.a3f56d66.chunk.js","mappings":"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","sources":["components/Timeline.js","../node_modules/@chakra-ui/layout/src/box.tsx","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Box, Flex, Text, VStack, Circle, useColorMode } from '@chakra-ui/react';\r\nimport { motion } from 'framer-motion';\r\nimport { FaGraduationCap, FaPaintBrush, FaChartLine } from 'react-icons/fa';\r\nimport { useInView } from 'react-intersection-observer';\r\n\r\nconst TimelineItem = ({ year, title, description, mobileDescription, icon, isLeft, index }) => {\r\n  const { colorMode } = useColorMode();\r\n  const isDark = colorMode === \"dark\";\r\n  const [ref, inView] = useInView({\r\n    threshold: 0.2,\r\n    triggerOnce: true\r\n  });\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      initial={{ opacity: 0, x: isLeft ? -100 : 100 }}\r\n      animate={inView ? { opacity: 1, x: 0 } : {}}\r\n      transition={{ duration: 0.8, delay: index * 0.2 }}\r\n      style={{ width: '100%' }}\r\n    >\r\n      <Flex\r\n        justify={{ base: \"center\", md: isLeft ? \"flex-start\" : \"flex-end\" }}\r\n        w=\"100%\"\r\n        position=\"relative\"\r\n        mb={8}\r\n      >\r\n        <Box\r\n          w={{ base: \"90%\", md: \"45%\" }}\r\n          p={6}\r\n          borderRadius=\"xl\"\r\n          bg={isDark ? \"#2953A6\" : \"#E3F2FD\"}\r\n          boxShadow=\"xl\"\r\n          position=\"relative\"\r\n          _hover={{ transform: \"scale(1.05)\" }}\r\n          transition=\"transform 0.3s\"\r\n        >\r\n          <Circle\r\n            size=\"40px\"\r\n            bg={isDark ? \"blue.500\" : \"blue.400\"}\r\n            color=\"white\"\r\n            position=\"absolute\"\r\n            top={{ base: \"-20px\", md: \"50%\" }}\r\n            left={{ base: \"50%\", md: isLeft ? \"calc(100% + 1.5rem)\" : \"calc(-3rem)\" }}\r\n            transform={{ \r\n              base: \"translateX(-50%)\", \r\n              md: isLeft ? \"translateY(-50%)\" : \"translateY(-50%)\" \r\n            }}\r\n          >\r\n            {icon}\r\n          </Circle>\r\n          \r\n          <Text\r\n            fontSize={{ base: \"lg\", md: \"xl\" }}\r\n            fontWeight=\"bold\"\r\n            color={isDark ? \"blue.200\" : \"blue.600\"}\r\n            mb={2}\r\n            fontFamily=\"Comfortaa\"\r\n          >\r\n            {year}\r\n          </Text>\r\n          \r\n          <Text\r\n            fontSize={{ base: \"xl\", md: \"2xl\" }}\r\n            fontWeight=\"bold\"\r\n            mb={2}\r\n            fontFamily=\"Comfortaa\"\r\n          >\r\n            {title}\r\n          </Text>\r\n          \r\n          <Text\r\n            fontSize=\"md\"\r\n            fontFamily=\"Work Sans\"\r\n            display={{ base: mobileDescription ? \"none\" : \"block\", md: \"block\" }}\r\n          >\r\n            {description}\r\n          </Text>\r\n          {mobileDescription && (\r\n            <Text\r\n              fontSize=\"md\"\r\n              fontFamily=\"Work Sans\"\r\n              display={{ base: \"block\", md: \"none\" }}\r\n            >\r\n              {mobileDescription}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n      </Flex>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default function Timeline() {\r\n  const timelineData = [\r\n    {\r\n      year: \"2020 – 2024\",\r\n      title: \"Bachelor's Degree in Informatics and Computer Engineering\",\r\n      description: \"Earned a degree in Informatics and Computer Engineering from Moscow Technical University of Communications and Informatics (MTUCI).\",\r\n      mobileDescription: \"Earned a degree in Informatics and Computer Engineering\",\r\n      icon: <FaGraduationCap size={20} />\r\n    },\r\n    {\r\n        year: \"2023 – 2024\",\r\n        title: \"Web Developer & Designer\",\r\n        description: \"Designed and developed web solutions at NIIPH ROSRESERVA, leading UI/UX strategy and frontend development.\",\r\n        icon: <FaPaintBrush size={20} />\r\n      },\r\n    {\r\n      year: \"2024 – Present\",\r\n      title: \"IT Auditor at Sber\",\r\n      description: \"Perform IT audits, risk assessments, and data analysis at Russia's largest bank, optimizing security and operational efficiency.\",\r\n      icon: <FaChartLine size={20} />\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <VStack w=\"100%\" spacing={0} py={16}>\r\n      <Text\r\n        fontFamily=\"Comfortaa\"\r\n        fontWeight=\"bold\"\r\n        fontSize={[\"3xl\", \"4xl\", \"6xl\"]}\r\n        textAlign=\"center\"\r\n        mb={12}\r\n      >\r\n        My Journey\r\n      </Text>\r\n      \r\n      <Box w=\"100%\" maxW=\"1200px\" px={4}>\r\n        {timelineData.map((item, index) => (\r\n          <TimelineItem\r\n            key={index}\r\n            year={item.year}\r\n            title={item.title}\r\n            description={item.description}\r\n            mobileDescription={item.mobileDescription}\r\n            icon={item.icon}\r\n            isLeft={index % 2 === 0}\r\n            index={index}\r\n          />\r\n        ))}\r\n      </Box>\r\n    </VStack>\r\n  );\r\n} ","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["TimelineItem","_ref","year","title","description","mobileDescription","icon","isLeft","index","colorMode","useColorMode","isDark","ref","inView","useInView","threshold","triggerOnce","_jsx","motion","div","initial","opacity","x","animate","transition","duration","delay","style","width","children","Flex","justify","base","md","w","position","mb","_jsxs","Box","p","borderRadius","bg","boxShadow","_hover","transform","Circle","size","color","top","left","Text","fontSize","fontWeight","fontFamily","display","Timeline","timelineData","FaGraduationCap","FaPaintBrush","FaChartLine","VStack","spacing","py","textAlign","maxW","px","map","item","chakra","displayName","Square","forwardRef","props","centerContent","rest","styles","alignItems","justifyContent","jsx","boxSize","__css","flexShrink","flexGrow","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}