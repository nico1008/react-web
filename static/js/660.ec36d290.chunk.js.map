{"version":3,"file":"static/js/660.ec36d290.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/spacer.tsx","components/Footer.js","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/react-use-merge-refs/src/index.ts","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx","../node_modules/@chakra-ui/button/src/icon-button.tsx"],"sourcesContent":["import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\n\nexport interface SpacerProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * A flexible flex spacer that expands along the major axis of its containing flex layout.\n * It renders a `div` by default, and takes up any available space.\n *\n * @see Docs https://chakra-ui.com/flex#using-the-spacer\n */\nexport const Spacer = chakra(\"div\", {\n  baseStyle: {\n    flex: 1,\n    justifySelf: \"stretch\",\n    alignSelf: \"stretch\",\n  },\n})\n\nSpacer.displayName = \"Spacer\"\n","import {React} from 'react'\r\nimport { IconButton } from '@chakra-ui/button';\r\nimport {Flex, Text, Spacer} from '@chakra-ui/layout';\r\nimport { FaGithub, FaTelegram, FaBehance } from 'react-icons/fa'\r\nimport { useColorMode } from '@chakra-ui/color-mode';\r\n\r\nconst SOCIAL_LINKS = [\r\n  {\r\n    icon: FaBehance,\r\n    url: \"https://www.behance.net/nico_1008\",\r\n    ariaLabel: \"Behance Profile\",\r\n  },\r\n  {\r\n    icon: FaGithub,\r\n    url: \"https://github.com/nico1008\",\r\n    ariaLabel: \"GitHub Profile\",\r\n  },\r\n  {\r\n    icon: FaTelegram,\r\n    url: \"https://t.me/nico_1008k\",\r\n    ariaLabel: \"Telegram Profile\",\r\n  }\r\n];\r\n\r\nexport default function Footer() {\r\n  const { colorMode } = useColorMode();\r\n  const isDark = colorMode === \"dark\";\r\n\r\n  const iconButtonStyles = {\r\n    mr: [\"2\", \"2\", \"2\", \"6\", \"6\", \"6\"],\r\n    mt: [\"2.5\", \"2.5\", \"2.5\", \"1\", \"1\", \"1\"],\r\n    size: \"md\",\r\n    color: isDark ? \"white\" : \"gray.800\",\r\n    bg: isDark ? \"whiteAlpha.200\" : \"gray.100\",\r\n    _hover: {\r\n      transform: \"scale(1.1)\",\r\n      bg: isDark ? \"whiteAlpha.300\" : \"gray.200\",\r\n    },\r\n    transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\r\n  };\r\n\r\n  const iconStyles = {\r\n    sx: {\r\n      \"& > *\": {\r\n        transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\r\n      },\r\n      \"&:hover\": {\r\n        \"& > *\": {\r\n          color: \"#0057FF\",\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      backgroundColor={isDark ? \"#2953A6\" : \"#E3F2FD\"}\r\n      borderTopRadius=\"40px\"\r\n      p=\"2\"\r\n      pl={[4, 4, 4, 16, 16, 16]}\r\n      alignSelf=\"flex-start\"\r\n      width=\"100%\"\r\n    >\r\n      <Text\r\n        mt=\"2.5\"\r\n        ml={[\"2\", \"2\", \"2\", \"40\", \"40\", \"40\"]}\r\n        fontWeight=\"regular\"\r\n        fontFamily=\"Work Sans\"\r\n      >\r\n        Â© {new Date().getFullYear()} All rights reserved\r\n      </Text>\r\n\r\n      <Spacer />\r\n\r\n      {SOCIAL_LINKS.map((link, index) => (\r\n        <IconButton\r\n          key={index}\r\n          icon={<link.icon />}\r\n          onClick={() => window.open(link.url)}\r\n          aria-label={link.ariaLabel}\r\n          {...iconButtonStyles}\r\n          {...iconStyles}\r\n          {...(index === SOCIAL_LINKS.length - 1 && {\r\n            mr: [\"4\", \"4\", \"4\", \"40\", \"40\", \"40\"]\r\n          })}\r\n        />\r\n      ))}\r\n    </Flex>\r\n  )\r\n}\r\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n"],"names":["Spacer","chakra","baseStyle","flex","justifySelf","alignSelf","displayName","SOCIAL_LINKS","icon","FaBehance","url","ariaLabel","FaGithub","FaTelegram","Footer","colorMode","useColorMode","isDark","iconButtonStyles","mr","mt","size","color","bg","_hover","transform","transition","iconStyles","sx","_jsxs","Flex","backgroundColor","borderTopRadius","p","pl","width","children","Text","ml","fontWeight","fontFamily","Date","getFullYear","_jsx","map","link","index","IconButton","onClick","window","open","length","ButtonGroupProvider","useButtonGroup","createContext","strict","name","ButtonIcon","props","className","rest","_children","isValidElement","cloneElement","focusable","_className","cx","jsx","span","display","flexShrink","ButtonSpinner","label","placement","spacing","Spinner","height","__css","marginProp","spinnerStyles","useMemo","alignItems","position","fontSize","lineHeight","div","mergeRefs","_len","arguments","refs","Array","_key","node","forEach","ref","value","current","error","Error","concat","assignRef","useMergeRefs","_len2","_key2","Button","forwardRef","group","styles","useStyleConfig","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","as","omitThemingProps","buttonStyles","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","_ref","defaultType","isButton","setIsButton","useState","useCallback","tagName","useButtonType","contentProps","jsxs","button","dataAttr","disabled","opacity","ButtonContent","Fragment","marginEnd","marginStart","isRound","element","padding","borderRadius"],"sourceRoot":""}